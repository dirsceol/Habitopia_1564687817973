/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5d41c8dfc0e2910e77977c56
*
* You will get 10% discount for each one of your friends
* 
*/
// Import Libraries
import { Component, OnInit } from '@angular/core';
import { Location } from '@angular/common';
import { ActivatedRoute } from '@angular/router';
import { AngularFirestore, AngularFirestoreDocument, AngularFirestoreCollection } from '@angular/fire/firestore';
import { Observable } from 'rxjs';

// Import Services
import { JournalEntryService } from '../../services/journal-entry.service';
import { InterpretationService } from '../../services/interpretation.service';
import { LogEntryService } from '../../services/log-entry.service';
import { MemberService } from '../../services/member.service';
import { ActionService } from '../../services/action.service';

import { JournalEntry } from '../../domain/habitopia_db/journal-entry';
import { Action } from '../../domain/habitopia_db/action';
import { Interpretation } from '../../domain/habitopia_db/interpretation';
import { LogEntry } from '../../domain/habitopia_db/log-entry';
import { Member } from '../../domain/habitopia_db/member';
import { Member } from '../../domain/habitopia_db/member';

// START - USED SERVICES
/**
* JournalEntryService.create
*	@description CRUD ACTION create
*
* InterpretationService.findByentry
*	@description CRUD ACTION findByentry
*	@param Objectid key Id della risorsa entry da cercare
*
* LogEntryService.findByjournalEntry
*	@description CRUD ACTION findByjournalEntry
*	@param Objectid key Id della risorsa journalEntry da cercare
*
* JournalEntryService.get
*	@description CRUD ACTION get
*	@param ObjectId id Id 
*
* MemberService.list
*	@description CRUD ACTION list
*
* MemberService.list
*	@description CRUD ACTION list
*
* ActionService.list
*	@description CRUD ACTION list
*
* JournalEntryService.update
*	@description CRUD ACTION update
*	@param ObjectId id Id
*
*/
// END - USED SERVICES

/**
 * This component allows to edit a  JournalEntry
 */
@Component({
    selector: 'app-journal-entry-edit',
    templateUrl: 'journal-entry-edit.component.html',
    styleUrls: ['journal-entry-edit.component.css']
})
export class JournalEntryEditComponent implements OnInit {
    item: any = {};
    itemDoc: AngularFirestoreDocument<JournalEntry>;
    isNew: Boolean = true;
    formValid: Boolean;

    listAction: Action[];
    listEntry: JournalEntry[];
    listJournalEntry: JournalEntry[];
    listMember: Member[];
    listMemberTarger: Member[];

    externalInterpretation: Interpretation[];
    externalLogEntry: LogEntry[];

    constructor(
        private journalentryService: JournalEntryService,
        private interpretationService: InterpretationService,
        private logentryService: LogEntryService,
        private memberService: MemberService,
        private actionService: ActionService,
        private route: ActivatedRoute,
        private location: Location) {
        // Init list
        this.externalInterpretation = [];
        this.externalLogEntry = [];
    }

    /**
     * Init
     */
    ngOnInit() {
        this.route.params.subscribe(param => {
            const id: string = param['id'];
            if (id !== 'new') {
                this.isNew = false;
                this.itemDoc = this.journalentryService.get(id);
                this.itemDoc.valueChanges().subscribe(item => this.item = item);

                this.interpretationService.findByEntry(id).subscribe(list => this.externalInterpretation = list);
                this.logentryService.findByJournalEntry(id).subscribe(list => this.externalLogEntry = list);
            }
            // Get relations
            this.actionService.list().subscribe(list => this.listAction = list);
            this.memberService.list().subscribe(list => this.listMember = list);
            this.memberService.list().subscribe(list => this.listMemberTarger = list);
        });
    }



    /**
     * Save JournalEntry
     *
     * @param {boolean} formValid Form validity check
     * @param JournalEntry item JournalEntry to save
     */
    save(formValid: boolean): void {
        this.formValid = formValid;
        if (formValid) {
            if (this.isNew) {
                // Create
                this.journalentryService.create(this.item);
                this.isNew = false;
            } else {
                // Update
                this.journalentryService.update(this.itemDoc, this.item);
            }
            this.goBack();
        }
    }

    /**
     * Go Back
     */
    goBack(): void {
        this.location.back();
    }

}
